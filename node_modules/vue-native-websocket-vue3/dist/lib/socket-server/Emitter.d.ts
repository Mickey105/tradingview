export declare class Emitter<T = any> {
    private listeners;
    constructor();
    /**
     * 添加事件监听 | Add event listener
     * @param label 事件名称 | Event name
     * @param callback 回调函数 | Callback
     * @param vm this对象 | this object
     * @return {boolean}
     */
    addListener(label: T, callback: (...params: T[]) => void, vm: T): boolean;
    /**
     * 移除监听 Remove monitor
     * @param label 事件名称 | Event name
     * @param callback 回调函数 | Callback
     * @param vm this对象 | this object
     * @return {boolean}
     */
    removeListener(label: T, callback: () => void, vm: T): boolean;
    /**
     * 触发监听 | Trigger monitor
     * @param label 事件名称 | Event name
     * @param args 参数 | parameter
     * @return {boolean}
     */
    emit(label: string, ...args: T[]): boolean;
}
declare const _default: Emitter<any>;
export default _default;
